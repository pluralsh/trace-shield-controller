//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pluralsh/controller-reconcile-helper/pkg/types"
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BasicAuth) DeepCopyInto(out *BasicAuth) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BasicAuth.
func (in *BasicAuth) DeepCopy() *BasicAuth {
	if in == nil {
		return nil
	}
	out := new(BasicAuth)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BlockedQuery) DeepCopyInto(out *BlockedQuery) {
	*out = *in
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = new(string)
		**out = **in
	}
	if in.Regex != nil {
		in, out := &in.Regex, &out.Regex
		*out = new(bool)
		**out = **in
	}
	if in.Hash != nil {
		in, out := &in.Hash, &out.Hash
		*out = new(uint32)
		**out = **in
	}
	if in.Types != nil {
		in, out := &in.Types, &out.Types
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlockedQuery.
func (in *BlockedQuery) DeepCopy() *BlockedQuery {
	if in == nil {
		return nil
	}
	out := new(BlockedQuery)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Config) DeepCopyInto(out *Config) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Config.
func (in *Config) DeepCopy() *Config {
	if in == nil {
		return nil
	}
	out := new(Config)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Config) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigList) DeepCopyInto(out *ConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Config, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigList.
func (in *ConfigList) DeepCopy() *ConfigList {
	if in == nil {
		return nil
	}
	out := new(ConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigMapSelector) DeepCopyInto(out *ConfigMapSelector) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigMapSelector.
func (in *ConfigMapSelector) DeepCopy() *ConfigMapSelector {
	if in == nil {
		return nil
	}
	out := new(ConfigMapSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigSpec) DeepCopyInto(out *ConfigSpec) {
	*out = *in
	in.Mimir.DeepCopyInto(&out.Mimir)
	in.Loki.DeepCopyInto(&out.Loki)
	out.Tempo = in.Tempo
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigSpec.
func (in *ConfigSpec) DeepCopy() *ConfigSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigStatus) DeepCopyInto(out *ConfigStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigStatus.
func (in *ConfigStatus) DeepCopy() *ConfigStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DimensionMappings) DeepCopyInto(out *DimensionMappings) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SourceLabel != nil {
		in, out := &in.SourceLabel, &out.SourceLabel
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Join != nil {
		in, out := &in.Join, &out.Join
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DimensionMappings.
func (in *DimensionMappings) DeepCopy() *DimensionMappings {
	if in == nil {
		return nil
	}
	out := new(DimensionMappings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilterPolicy) DeepCopyInto(out *FilterPolicy) {
	*out = *in
	if in.Include != nil {
		in, out := &in.Include, &out.Include
		*out = new(PolicyMatch)
		(*in).DeepCopyInto(*out)
	}
	if in.Exclude != nil {
		in, out := &in.Exclude, &out.Exclude
		*out = new(PolicyMatch)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilterPolicy.
func (in *FilterPolicy) DeepCopy() *FilterPolicy {
	if in == nil {
		return nil
	}
	out := new(FilterPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ForwardingRule) DeepCopyInto(out *ForwardingRule) {
	*out = *in
	if in.Ingest != nil {
		in, out := &in.Ingest, &out.Ingest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ForwardingRule.
func (in *ForwardingRule) DeepCopy() *ForwardingRule {
	if in == nil {
		return nil
	}
	out := new(ForwardingRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeaderAuth) DeepCopyInto(out *HeaderAuth) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeaderAuth.
func (in *HeaderAuth) DeepCopy() *HeaderAuth {
	if in == nil {
		return nil
	}
	out := new(HeaderAuth)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LimitSpec) DeepCopyInto(out *LimitSpec) {
	*out = *in
	if in.Mimir != nil {
		in, out := &in.Mimir, &out.Mimir
		*out = new(MimirLimits)
		(*in).DeepCopyInto(*out)
	}
	if in.Loki != nil {
		in, out := &in.Loki, &out.Loki
		*out = new(LokiLimits)
		(*in).DeepCopyInto(*out)
	}
	if in.Tempo != nil {
		in, out := &in.Tempo, &out.Tempo
		*out = new(TempoLimits)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LimitSpec.
func (in *LimitSpec) DeepCopy() *LimitSpec {
	if in == nil {
		return nil
	}
	out := new(LimitSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LokiConfigSpec) DeepCopyInto(out *LokiConfigSpec) {
	*out = *in
	in.Multi.DeepCopyInto(&out.Multi)
	if in.TenantConfig != nil {
		in, out := &in.TenantConfig, &out.TenantConfig
		*out = make(map[string]*LokiRuntimeConfig, len(*in))
		for key, val := range *in {
			var outVal *LokiRuntimeConfig
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(LokiRuntimeConfig)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LokiConfigSpec.
func (in *LokiConfigSpec) DeepCopy() *LokiConfigSpec {
	if in == nil {
		return nil
	}
	out := new(LokiConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LokiLimits) DeepCopyInto(out *LokiLimits) {
	*out = *in
	if in.IngestionRateStrategy != nil {
		in, out := &in.IngestionRateStrategy, &out.IngestionRateStrategy
		*out = new(string)
		**out = **in
	}
	if in.IngestionRateMB != nil {
		in, out := &in.IngestionRateMB, &out.IngestionRateMB
		*out = new(float64)
		**out = **in
	}
	if in.IngestionBurstSizeMB != nil {
		in, out := &in.IngestionBurstSizeMB, &out.IngestionBurstSizeMB
		*out = new(float64)
		**out = **in
	}
	if in.MaxLabelNameLength != nil {
		in, out := &in.MaxLabelNameLength, &out.MaxLabelNameLength
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelValueLength != nil {
		in, out := &in.MaxLabelValueLength, &out.MaxLabelValueLength
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelNamesPerSeries != nil {
		in, out := &in.MaxLabelNamesPerSeries, &out.MaxLabelNamesPerSeries
		*out = new(int)
		**out = **in
	}
	if in.RejectOldSamples != nil {
		in, out := &in.RejectOldSamples, &out.RejectOldSamples
		*out = new(bool)
		**out = **in
	}
	if in.RejectOldSamplesMaxAge != nil {
		in, out := &in.RejectOldSamplesMaxAge, &out.RejectOldSamplesMaxAge
		*out = new(v1.Duration)
		**out = **in
	}
	if in.CreationGracePeriod != nil {
		in, out := &in.CreationGracePeriod, &out.CreationGracePeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.EnforceMetricName != nil {
		in, out := &in.EnforceMetricName, &out.EnforceMetricName
		*out = new(bool)
		**out = **in
	}
	if in.MaxLineSize != nil {
		in, out := &in.MaxLineSize, &out.MaxLineSize
		*out = new(uint64)
		**out = **in
	}
	if in.MaxLineSizeTruncate != nil {
		in, out := &in.MaxLineSizeTruncate, &out.MaxLineSizeTruncate
		*out = new(bool)
		**out = **in
	}
	if in.IncrementDuplicateTimestamp != nil {
		in, out := &in.IncrementDuplicateTimestamp, &out.IncrementDuplicateTimestamp
		*out = new(bool)
		**out = **in
	}
	if in.MaxLocalStreamsPerUser != nil {
		in, out := &in.MaxLocalStreamsPerUser, &out.MaxLocalStreamsPerUser
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalStreamsPerUser != nil {
		in, out := &in.MaxGlobalStreamsPerUser, &out.MaxGlobalStreamsPerUser
		*out = new(int)
		**out = **in
	}
	if in.UnorderedWrites != nil {
		in, out := &in.UnorderedWrites, &out.UnorderedWrites
		*out = new(bool)
		**out = **in
	}
	if in.PerStreamRateLimit != nil {
		in, out := &in.PerStreamRateLimit, &out.PerStreamRateLimit
		*out = new(uint64)
		**out = **in
	}
	if in.PerStreamRateLimitBurst != nil {
		in, out := &in.PerStreamRateLimitBurst, &out.PerStreamRateLimitBurst
		*out = new(uint64)
		**out = **in
	}
	if in.MaxChunksPerQuery != nil {
		in, out := &in.MaxChunksPerQuery, &out.MaxChunksPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxQuerySeries != nil {
		in, out := &in.MaxQuerySeries, &out.MaxQuerySeries
		*out = new(int)
		**out = **in
	}
	if in.MaxQueryLookback != nil {
		in, out := &in.MaxQueryLookback, &out.MaxQueryLookback
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueryLength != nil {
		in, out := &in.MaxQueryLength, &out.MaxQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueryRange != nil {
		in, out := &in.MaxQueryRange, &out.MaxQueryRange
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueryParallelism != nil {
		in, out := &in.MaxQueryParallelism, &out.MaxQueryParallelism
		*out = new(int)
		**out = **in
	}
	if in.TSDBMaxQueryParallelism != nil {
		in, out := &in.TSDBMaxQueryParallelism, &out.TSDBMaxQueryParallelism
		*out = new(int)
		**out = **in
	}
	if in.TSDBMaxBytesPerShard != nil {
		in, out := &in.TSDBMaxBytesPerShard, &out.TSDBMaxBytesPerShard
		*out = new(uint64)
		**out = **in
	}
	if in.CardinalityLimit != nil {
		in, out := &in.CardinalityLimit, &out.CardinalityLimit
		*out = new(int)
		**out = **in
	}
	if in.MaxStreamsMatchersPerQuery != nil {
		in, out := &in.MaxStreamsMatchersPerQuery, &out.MaxStreamsMatchersPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxConcurrentTailRequests != nil {
		in, out := &in.MaxConcurrentTailRequests, &out.MaxConcurrentTailRequests
		*out = new(int)
		**out = **in
	}
	if in.MaxEntriesLimitPerQuery != nil {
		in, out := &in.MaxEntriesLimitPerQuery, &out.MaxEntriesLimitPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxCacheFreshness != nil {
		in, out := &in.MaxCacheFreshness, &out.MaxCacheFreshness
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxStatsCacheFreshness != nil {
		in, out := &in.MaxStatsCacheFreshness, &out.MaxStatsCacheFreshness
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueriersPerTenant != nil {
		in, out := &in.MaxQueriersPerTenant, &out.MaxQueriersPerTenant
		*out = new(int)
		**out = **in
	}
	if in.QueryReadyIndexNumDays != nil {
		in, out := &in.QueryReadyIndexNumDays, &out.QueryReadyIndexNumDays
		*out = new(int)
		**out = **in
	}
	if in.QueryTimeout != nil {
		in, out := &in.QueryTimeout, &out.QueryTimeout
		*out = new(v1.Duration)
		**out = **in
	}
	if in.QuerySplitDuration != nil {
		in, out := &in.QuerySplitDuration, &out.QuerySplitDuration
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MinShardingLookback != nil {
		in, out := &in.MinShardingLookback, &out.MinShardingLookback
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueryBytesRead != nil {
		in, out := &in.MaxQueryBytesRead, &out.MaxQueryBytesRead
		*out = new(uint64)
		**out = **in
	}
	if in.MaxQuerierBytesRead != nil {
		in, out := &in.MaxQuerierBytesRead, &out.MaxQuerierBytesRead
		*out = new(uint64)
		**out = **in
	}
	if in.VolumeEnabled != nil {
		in, out := &in.VolumeEnabled, &out.VolumeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VolumeMaxSeries != nil {
		in, out := &in.VolumeMaxSeries, &out.VolumeMaxSeries
		*out = new(int)
		**out = **in
	}
	if in.RulerEvaluationDelay != nil {
		in, out := &in.RulerEvaluationDelay, &out.RulerEvaluationDelay
		*out = new(v1.Duration)
		**out = **in
	}
	if in.RulerMaxRulesPerRuleGroup != nil {
		in, out := &in.RulerMaxRulesPerRuleGroup, &out.RulerMaxRulesPerRuleGroup
		*out = new(int)
		**out = **in
	}
	if in.RulerMaxRuleGroupsPerTenant != nil {
		in, out := &in.RulerMaxRuleGroupsPerTenant, &out.RulerMaxRuleGroupsPerTenant
		*out = new(int)
		**out = **in
	}
	if in.RulerAlertManagerConfig != nil {
		in, out := &in.RulerAlertManagerConfig, &out.RulerAlertManagerConfig
		*out = new(RulerAlertManagerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.RulerTenantShardSize != nil {
		in, out := &in.RulerTenantShardSize, &out.RulerTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.RulerRemoteWriteDisabled != nil {
		in, out := &in.RulerRemoteWriteDisabled, &out.RulerRemoteWriteDisabled
		*out = new(bool)
		**out = **in
	}
	if in.RulerRemoteWriteConfig != nil {
		in, out := &in.RulerRemoteWriteConfig, &out.RulerRemoteWriteConfig
		*out = make(map[string]monitoringv1.RemoteWriteSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.RulerRemoteEvaluationTimeout != nil {
		in, out := &in.RulerRemoteEvaluationTimeout, &out.RulerRemoteEvaluationTimeout
		*out = new(v1.Duration)
		**out = **in
	}
	if in.RulerRemoteEvaluationMaxResponseSize != nil {
		in, out := &in.RulerRemoteEvaluationMaxResponseSize, &out.RulerRemoteEvaluationMaxResponseSize
		*out = new(int64)
		**out = **in
	}
	if in.DeletionMode != nil {
		in, out := &in.DeletionMode, &out.DeletionMode
		*out = new(string)
		**out = **in
	}
	if in.RetentionPeriod != nil {
		in, out := &in.RetentionPeriod, &out.RetentionPeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.StreamRetention != nil {
		in, out := &in.StreamRetention, &out.StreamRetention
		*out = make([]StreamRetention, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ShardStreams != nil {
		in, out := &in.ShardStreams, &out.ShardStreams
		*out = new(ShardstreamsConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.BlockedQueries != nil {
		in, out := &in.BlockedQueries, &out.BlockedQueries
		*out = make([]*BlockedQuery, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(BlockedQuery)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.RequiredLabels != nil {
		in, out := &in.RequiredLabels, &out.RequiredLabels
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RequiredNumberLabels != nil {
		in, out := &in.RequiredNumberLabels, &out.RequiredNumberLabels
		*out = new(int)
		**out = **in
	}
	if in.IndexGatewayShardSize != nil {
		in, out := &in.IndexGatewayShardSize, &out.IndexGatewayShardSize
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LokiLimits.
func (in *LokiLimits) DeepCopy() *LokiLimits {
	if in == nil {
		return nil
	}
	out := new(LokiLimits)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LokiRuntimeConfig) DeepCopyInto(out *LokiRuntimeConfig) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LokiRuntimeConfig.
func (in *LokiRuntimeConfig) DeepCopy() *LokiRuntimeConfig {
	if in == nil {
		return nil
	}
	out := new(LokiRuntimeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LokiSpec) DeepCopyInto(out *LokiSpec) {
	*out = *in
	out.ConfigMap = in.ConfigMap
	in.Config.DeepCopyInto(&out.Config)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LokiSpec.
func (in *LokiSpec) DeepCopy() *LokiSpec {
	if in == nil {
		return nil
	}
	out := new(LokiSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MatchPolicyAttribute) DeepCopyInto(out *MatchPolicyAttribute) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	in.Value.DeepCopyInto(&out.Value)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MatchPolicyAttribute.
func (in *MatchPolicyAttribute) DeepCopy() *MatchPolicyAttribute {
	if in == nil {
		return nil
	}
	out := new(MatchPolicyAttribute)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MimirConfigSpec) DeepCopyInto(out *MimirConfigSpec) {
	*out = *in
	in.Multi.DeepCopyInto(&out.Multi)
	if in.IngesterChunkStreaming != nil {
		in, out := &in.IngesterChunkStreaming, &out.IngesterChunkStreaming
		*out = new(bool)
		**out = **in
	}
	if in.IngesterLimits != nil {
		in, out := &in.IngesterLimits, &out.IngesterLimits
		*out = new(MimirIngesterInstanceLimits)
		**out = **in
	}
	if in.DistributorLimits != nil {
		in, out := &in.DistributorLimits, &out.DistributorLimits
		*out = new(MimirDistributorInstanceLimits)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MimirConfigSpec.
func (in *MimirConfigSpec) DeepCopy() *MimirConfigSpec {
	if in == nil {
		return nil
	}
	out := new(MimirConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MimirDistributorInstanceLimits) DeepCopyInto(out *MimirDistributorInstanceLimits) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MimirDistributorInstanceLimits.
func (in *MimirDistributorInstanceLimits) DeepCopy() *MimirDistributorInstanceLimits {
	if in == nil {
		return nil
	}
	out := new(MimirDistributorInstanceLimits)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MimirIngesterInstanceLimits) DeepCopyInto(out *MimirIngesterInstanceLimits) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MimirIngesterInstanceLimits.
func (in *MimirIngesterInstanceLimits) DeepCopy() *MimirIngesterInstanceLimits {
	if in == nil {
		return nil
	}
	out := new(MimirIngesterInstanceLimits)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MimirLimits) DeepCopyInto(out *MimirLimits) {
	*out = *in
	if in.RequestRate != nil {
		in, out := &in.RequestRate, &out.RequestRate
		*out = new(float64)
		**out = **in
	}
	if in.RequestBurstSize != nil {
		in, out := &in.RequestBurstSize, &out.RequestBurstSize
		*out = new(int)
		**out = **in
	}
	if in.IngestionRate != nil {
		in, out := &in.IngestionRate, &out.IngestionRate
		*out = new(float64)
		**out = **in
	}
	if in.IngestionBurstSize != nil {
		in, out := &in.IngestionBurstSize, &out.IngestionBurstSize
		*out = new(int)
		**out = **in
	}
	if in.AcceptHASamples != nil {
		in, out := &in.AcceptHASamples, &out.AcceptHASamples
		*out = new(bool)
		**out = **in
	}
	if in.HAClusterLabel != nil {
		in, out := &in.HAClusterLabel, &out.HAClusterLabel
		*out = new(string)
		**out = **in
	}
	if in.HAReplicaLabel != nil {
		in, out := &in.HAReplicaLabel, &out.HAReplicaLabel
		*out = new(string)
		**out = **in
	}
	if in.HAMaxClusters != nil {
		in, out := &in.HAMaxClusters, &out.HAMaxClusters
		*out = new(int)
		**out = **in
	}
	if in.DropLabels != nil {
		in, out := &in.DropLabels, &out.DropLabels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxLabelNameLength != nil {
		in, out := &in.MaxLabelNameLength, &out.MaxLabelNameLength
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelValueLength != nil {
		in, out := &in.MaxLabelValueLength, &out.MaxLabelValueLength
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelNamesPerSeries != nil {
		in, out := &in.MaxLabelNamesPerSeries, &out.MaxLabelNamesPerSeries
		*out = new(int)
		**out = **in
	}
	if in.MaxMetadataLength != nil {
		in, out := &in.MaxMetadataLength, &out.MaxMetadataLength
		*out = new(int)
		**out = **in
	}
	if in.MaxNativeHistogramBuckets != nil {
		in, out := &in.MaxNativeHistogramBuckets, &out.MaxNativeHistogramBuckets
		*out = new(int)
		**out = **in
	}
	if in.CreationGracePeriod != nil {
		in, out := &in.CreationGracePeriod, &out.CreationGracePeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.EnforceMetadataMetricName != nil {
		in, out := &in.EnforceMetadataMetricName, &out.EnforceMetadataMetricName
		*out = new(bool)
		**out = **in
	}
	if in.IngestionTenantShardSize != nil {
		in, out := &in.IngestionTenantShardSize, &out.IngestionTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.MetricRelabelConfigs != nil {
		in, out := &in.MetricRelabelConfigs, &out.MetricRelabelConfigs
		*out = make([]monitoringv1.RelabelConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxGlobalSeriesPerUser != nil {
		in, out := &in.MaxGlobalSeriesPerUser, &out.MaxGlobalSeriesPerUser
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalSeriesPerMetric != nil {
		in, out := &in.MaxGlobalSeriesPerMetric, &out.MaxGlobalSeriesPerMetric
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalMetricsWithMetadataPerUser != nil {
		in, out := &in.MaxGlobalMetricsWithMetadataPerUser, &out.MaxGlobalMetricsWithMetadataPerUser
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalMetadataPerMetric != nil {
		in, out := &in.MaxGlobalMetadataPerMetric, &out.MaxGlobalMetadataPerMetric
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalExemplarsPerUser != nil {
		in, out := &in.MaxGlobalExemplarsPerUser, &out.MaxGlobalExemplarsPerUser
		*out = new(int)
		**out = **in
	}
	if in.NativeHistogramsIngestionEnabled != nil {
		in, out := &in.NativeHistogramsIngestionEnabled, &out.NativeHistogramsIngestionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ActiveSeriesCustomTrackersConfig != nil {
		in, out := &in.ActiveSeriesCustomTrackersConfig, &out.ActiveSeriesCustomTrackersConfig
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.OutOfOrderTimeWindow != nil {
		in, out := &in.OutOfOrderTimeWindow, &out.OutOfOrderTimeWindow
		*out = new(v1.Duration)
		**out = **in
	}
	if in.OutOfOrderBlocksExternalLabelEnabled != nil {
		in, out := &in.OutOfOrderBlocksExternalLabelEnabled, &out.OutOfOrderBlocksExternalLabelEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SeparateMetricsGroupLabel != nil {
		in, out := &in.SeparateMetricsGroupLabel, &out.SeparateMetricsGroupLabel
		*out = new(string)
		**out = **in
	}
	if in.MaxChunksPerQuery != nil {
		in, out := &in.MaxChunksPerQuery, &out.MaxChunksPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxFetchedSeriesPerQuery != nil {
		in, out := &in.MaxFetchedSeriesPerQuery, &out.MaxFetchedSeriesPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxFetchedChunkBytesPerQuery != nil {
		in, out := &in.MaxFetchedChunkBytesPerQuery, &out.MaxFetchedChunkBytesPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxQueryLookback != nil {
		in, out := &in.MaxQueryLookback, &out.MaxQueryLookback
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxPartialQueryLength != nil {
		in, out := &in.MaxPartialQueryLength, &out.MaxPartialQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueryParallelism != nil {
		in, out := &in.MaxQueryParallelism, &out.MaxQueryParallelism
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelsQueryLength != nil {
		in, out := &in.MaxLabelsQueryLength, &out.MaxLabelsQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxCacheFreshness != nil {
		in, out := &in.MaxCacheFreshness, &out.MaxCacheFreshness
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueriersPerTenant != nil {
		in, out := &in.MaxQueriersPerTenant, &out.MaxQueriersPerTenant
		*out = new(int)
		**out = **in
	}
	if in.QueryShardingTotalShards != nil {
		in, out := &in.QueryShardingTotalShards, &out.QueryShardingTotalShards
		*out = new(int)
		**out = **in
	}
	if in.QueryShardingMaxShardedQueries != nil {
		in, out := &in.QueryShardingMaxShardedQueries, &out.QueryShardingMaxShardedQueries
		*out = new(int)
		**out = **in
	}
	if in.QueryShardingMaxRegexpSizeBytes != nil {
		in, out := &in.QueryShardingMaxRegexpSizeBytes, &out.QueryShardingMaxRegexpSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.SplitInstantQueriesByInterval != nil {
		in, out := &in.SplitInstantQueriesByInterval, &out.SplitInstantQueriesByInterval
		*out = new(v1.Duration)
		**out = **in
	}
	if in.QueryIngestersWithin != nil {
		in, out := &in.QueryIngestersWithin, &out.QueryIngestersWithin
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxTotalQueryLength != nil {
		in, out := &in.MaxTotalQueryLength, &out.MaxTotalQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTL != nil {
		in, out := &in.ResultsCacheTTL, &out.ResultsCacheTTL
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTLForOutOfOrderTimeWindow != nil {
		in, out := &in.ResultsCacheTTLForOutOfOrderTimeWindow, &out.ResultsCacheTTLForOutOfOrderTimeWindow
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTLForCardinalityQuery != nil {
		in, out := &in.ResultsCacheTTLForCardinalityQuery, &out.ResultsCacheTTLForCardinalityQuery
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTLForLabelsQuery != nil {
		in, out := &in.ResultsCacheTTLForLabelsQuery, &out.ResultsCacheTTLForLabelsQuery
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheForUnalignedQueryEnabled != nil {
		in, out := &in.ResultsCacheForUnalignedQueryEnabled, &out.ResultsCacheForUnalignedQueryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxQueryExpressionSizeBytes != nil {
		in, out := &in.MaxQueryExpressionSizeBytes, &out.MaxQueryExpressionSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.CardinalityAnalysisEnabled != nil {
		in, out := &in.CardinalityAnalysisEnabled, &out.CardinalityAnalysisEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LabelNamesAndValuesResultsMaxSizeBytes != nil {
		in, out := &in.LabelNamesAndValuesResultsMaxSizeBytes, &out.LabelNamesAndValuesResultsMaxSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.LabelValuesMaxCardinalityLabelNamesPerRequest != nil {
		in, out := &in.LabelValuesMaxCardinalityLabelNamesPerRequest, &out.LabelValuesMaxCardinalityLabelNamesPerRequest
		*out = new(int)
		**out = **in
	}
	if in.RulerEvaluationDelay != nil {
		in, out := &in.RulerEvaluationDelay, &out.RulerEvaluationDelay
		*out = new(v1.Duration)
		**out = **in
	}
	if in.RulerTenantShardSize != nil {
		in, out := &in.RulerTenantShardSize, &out.RulerTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.RulerMaxRulesPerRuleGroup != nil {
		in, out := &in.RulerMaxRulesPerRuleGroup, &out.RulerMaxRulesPerRuleGroup
		*out = new(int)
		**out = **in
	}
	if in.RulerMaxRuleGroupsPerTenant != nil {
		in, out := &in.RulerMaxRuleGroupsPerTenant, &out.RulerMaxRuleGroupsPerTenant
		*out = new(int)
		**out = **in
	}
	if in.RulerRecordingRulesEvaluationEnabled != nil {
		in, out := &in.RulerRecordingRulesEvaluationEnabled, &out.RulerRecordingRulesEvaluationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RulerAlertingRulesEvaluationEnabled != nil {
		in, out := &in.RulerAlertingRulesEvaluationEnabled, &out.RulerAlertingRulesEvaluationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RulerSyncRulesOnChangesEnabled != nil {
		in, out := &in.RulerSyncRulesOnChangesEnabled, &out.RulerSyncRulesOnChangesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StoreGatewayTenantShardSize != nil {
		in, out := &in.StoreGatewayTenantShardSize, &out.StoreGatewayTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.CompactorBlocksRetentionPeriod != nil {
		in, out := &in.CompactorBlocksRetentionPeriod, &out.CompactorBlocksRetentionPeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.CompactorSplitAndMergeShards != nil {
		in, out := &in.CompactorSplitAndMergeShards, &out.CompactorSplitAndMergeShards
		*out = new(int)
		**out = **in
	}
	if in.CompactorSplitGroups != nil {
		in, out := &in.CompactorSplitGroups, &out.CompactorSplitGroups
		*out = new(int)
		**out = **in
	}
	if in.CompactorTenantShardSize != nil {
		in, out := &in.CompactorTenantShardSize, &out.CompactorTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.CompactorPartialBlockDeletionDelay != nil {
		in, out := &in.CompactorPartialBlockDeletionDelay, &out.CompactorPartialBlockDeletionDelay
		*out = new(v1.Duration)
		**out = **in
	}
	if in.CompactorBlockUploadEnabled != nil {
		in, out := &in.CompactorBlockUploadEnabled, &out.CompactorBlockUploadEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CompactorBlockUploadValidationEnabled != nil {
		in, out := &in.CompactorBlockUploadValidationEnabled, &out.CompactorBlockUploadValidationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CompactorBlockUploadVerifyChunks != nil {
		in, out := &in.CompactorBlockUploadVerifyChunks, &out.CompactorBlockUploadVerifyChunks
		*out = new(bool)
		**out = **in
	}
	if in.CompactorBlockUploadMaxBlockSizeBytes != nil {
		in, out := &in.CompactorBlockUploadMaxBlockSizeBytes, &out.CompactorBlockUploadMaxBlockSizeBytes
		*out = new(int64)
		**out = **in
	}
	if in.S3SSEType != nil {
		in, out := &in.S3SSEType, &out.S3SSEType
		*out = new(string)
		**out = **in
	}
	if in.S3SSEKMSKeyID != nil {
		in, out := &in.S3SSEKMSKeyID, &out.S3SSEKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.S3SSEKMSEncryptionContext != nil {
		in, out := &in.S3SSEKMSEncryptionContext, &out.S3SSEKMSEncryptionContext
		*out = new(string)
		**out = **in
	}
	if in.AlertmanagerReceiversBlockCIDRNetworks != nil {
		in, out := &in.AlertmanagerReceiversBlockCIDRNetworks, &out.AlertmanagerReceiversBlockCIDRNetworks
		*out = new(string)
		**out = **in
	}
	if in.AlertmanagerReceiversBlockPrivateAddresses != nil {
		in, out := &in.AlertmanagerReceiversBlockPrivateAddresses, &out.AlertmanagerReceiversBlockPrivateAddresses
		*out = new(bool)
		**out = **in
	}
	if in.NotificationRateLimit != nil {
		in, out := &in.NotificationRateLimit, &out.NotificationRateLimit
		*out = new(float64)
		**out = **in
	}
	if in.NotificationRateLimitPerIntegration != nil {
		in, out := &in.NotificationRateLimitPerIntegration, &out.NotificationRateLimitPerIntegration
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AlertmanagerMaxConfigSizeBytes != nil {
		in, out := &in.AlertmanagerMaxConfigSizeBytes, &out.AlertmanagerMaxConfigSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxTemplatesCount != nil {
		in, out := &in.AlertmanagerMaxTemplatesCount, &out.AlertmanagerMaxTemplatesCount
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxTemplateSizeBytes != nil {
		in, out := &in.AlertmanagerMaxTemplateSizeBytes, &out.AlertmanagerMaxTemplateSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxDispatcherAggregationGroups != nil {
		in, out := &in.AlertmanagerMaxDispatcherAggregationGroups, &out.AlertmanagerMaxDispatcherAggregationGroups
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxAlertsCount != nil {
		in, out := &in.AlertmanagerMaxAlertsCount, &out.AlertmanagerMaxAlertsCount
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxAlertsSizeBytes != nil {
		in, out := &in.AlertmanagerMaxAlertsSizeBytes, &out.AlertmanagerMaxAlertsSizeBytes
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MimirLimits.
func (in *MimirLimits) DeepCopy() *MimirLimits {
	if in == nil {
		return nil
	}
	out := new(MimirLimits)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MimirLimitsInput) DeepCopyInto(out *MimirLimitsInput) {
	*out = *in
	if in.RequestRate != nil {
		in, out := &in.RequestRate, &out.RequestRate
		*out = new(float64)
		**out = **in
	}
	if in.RequestBurstSize != nil {
		in, out := &in.RequestBurstSize, &out.RequestBurstSize
		*out = new(int)
		**out = **in
	}
	if in.IngestionRate != nil {
		in, out := &in.IngestionRate, &out.IngestionRate
		*out = new(float64)
		**out = **in
	}
	if in.IngestionBurstSize != nil {
		in, out := &in.IngestionBurstSize, &out.IngestionBurstSize
		*out = new(int)
		**out = **in
	}
	if in.AcceptHASamples != nil {
		in, out := &in.AcceptHASamples, &out.AcceptHASamples
		*out = new(bool)
		**out = **in
	}
	if in.HAClusterLabel != nil {
		in, out := &in.HAClusterLabel, &out.HAClusterLabel
		*out = new(string)
		**out = **in
	}
	if in.HAReplicaLabel != nil {
		in, out := &in.HAReplicaLabel, &out.HAReplicaLabel
		*out = new(string)
		**out = **in
	}
	if in.HAMaxClusters != nil {
		in, out := &in.HAMaxClusters, &out.HAMaxClusters
		*out = new(int)
		**out = **in
	}
	if in.DropLabels != nil {
		in, out := &in.DropLabels, &out.DropLabels
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxLabelNameLength != nil {
		in, out := &in.MaxLabelNameLength, &out.MaxLabelNameLength
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelValueLength != nil {
		in, out := &in.MaxLabelValueLength, &out.MaxLabelValueLength
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelNamesPerSeries != nil {
		in, out := &in.MaxLabelNamesPerSeries, &out.MaxLabelNamesPerSeries
		*out = new(int)
		**out = **in
	}
	if in.MaxMetadataLength != nil {
		in, out := &in.MaxMetadataLength, &out.MaxMetadataLength
		*out = new(int)
		**out = **in
	}
	if in.MaxNativeHistogramBuckets != nil {
		in, out := &in.MaxNativeHistogramBuckets, &out.MaxNativeHistogramBuckets
		*out = new(int)
		**out = **in
	}
	if in.CreationGracePeriod != nil {
		in, out := &in.CreationGracePeriod, &out.CreationGracePeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.EnforceMetadataMetricName != nil {
		in, out := &in.EnforceMetadataMetricName, &out.EnforceMetadataMetricName
		*out = new(bool)
		**out = **in
	}
	if in.IngestionTenantShardSize != nil {
		in, out := &in.IngestionTenantShardSize, &out.IngestionTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.MetricRelabelConfigs != nil {
		in, out := &in.MetricRelabelConfigs, &out.MetricRelabelConfigs
		*out = make([]monitoringv1.RelabelConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxGlobalSeriesPerUser != nil {
		in, out := &in.MaxGlobalSeriesPerUser, &out.MaxGlobalSeriesPerUser
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalSeriesPerMetric != nil {
		in, out := &in.MaxGlobalSeriesPerMetric, &out.MaxGlobalSeriesPerMetric
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalMetricsWithMetadataPerUser != nil {
		in, out := &in.MaxGlobalMetricsWithMetadataPerUser, &out.MaxGlobalMetricsWithMetadataPerUser
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalMetadataPerMetric != nil {
		in, out := &in.MaxGlobalMetadataPerMetric, &out.MaxGlobalMetadataPerMetric
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalExemplarsPerUser != nil {
		in, out := &in.MaxGlobalExemplarsPerUser, &out.MaxGlobalExemplarsPerUser
		*out = new(int)
		**out = **in
	}
	if in.NativeHistogramsIngestionEnabled != nil {
		in, out := &in.NativeHistogramsIngestionEnabled, &out.NativeHistogramsIngestionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ActiveSeriesCustomTrackersConfig != nil {
		in, out := &in.ActiveSeriesCustomTrackersConfig, &out.ActiveSeriesCustomTrackersConfig
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.OutOfOrderTimeWindow != nil {
		in, out := &in.OutOfOrderTimeWindow, &out.OutOfOrderTimeWindow
		*out = new(v1.Duration)
		**out = **in
	}
	if in.OutOfOrderBlocksExternalLabelEnabled != nil {
		in, out := &in.OutOfOrderBlocksExternalLabelEnabled, &out.OutOfOrderBlocksExternalLabelEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SeparateMetricsGroupLabel != nil {
		in, out := &in.SeparateMetricsGroupLabel, &out.SeparateMetricsGroupLabel
		*out = new(string)
		**out = **in
	}
	if in.MaxChunksPerQuery != nil {
		in, out := &in.MaxChunksPerQuery, &out.MaxChunksPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxFetchedSeriesPerQuery != nil {
		in, out := &in.MaxFetchedSeriesPerQuery, &out.MaxFetchedSeriesPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxFetchedChunkBytesPerQuery != nil {
		in, out := &in.MaxFetchedChunkBytesPerQuery, &out.MaxFetchedChunkBytesPerQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxQueryLookback != nil {
		in, out := &in.MaxQueryLookback, &out.MaxQueryLookback
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxPartialQueryLength != nil {
		in, out := &in.MaxPartialQueryLength, &out.MaxPartialQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueryParallelism != nil {
		in, out := &in.MaxQueryParallelism, &out.MaxQueryParallelism
		*out = new(int)
		**out = **in
	}
	if in.MaxLabelsQueryLength != nil {
		in, out := &in.MaxLabelsQueryLength, &out.MaxLabelsQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxCacheFreshness != nil {
		in, out := &in.MaxCacheFreshness, &out.MaxCacheFreshness
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxQueriersPerTenant != nil {
		in, out := &in.MaxQueriersPerTenant, &out.MaxQueriersPerTenant
		*out = new(int)
		**out = **in
	}
	if in.QueryShardingTotalShards != nil {
		in, out := &in.QueryShardingTotalShards, &out.QueryShardingTotalShards
		*out = new(int)
		**out = **in
	}
	if in.QueryShardingMaxShardedQueries != nil {
		in, out := &in.QueryShardingMaxShardedQueries, &out.QueryShardingMaxShardedQueries
		*out = new(int)
		**out = **in
	}
	if in.QueryShardingMaxRegexpSizeBytes != nil {
		in, out := &in.QueryShardingMaxRegexpSizeBytes, &out.QueryShardingMaxRegexpSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.SplitInstantQueriesByInterval != nil {
		in, out := &in.SplitInstantQueriesByInterval, &out.SplitInstantQueriesByInterval
		*out = new(v1.Duration)
		**out = **in
	}
	if in.QueryIngestersWithin != nil {
		in, out := &in.QueryIngestersWithin, &out.QueryIngestersWithin
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxTotalQueryLength != nil {
		in, out := &in.MaxTotalQueryLength, &out.MaxTotalQueryLength
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTL != nil {
		in, out := &in.ResultsCacheTTL, &out.ResultsCacheTTL
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTLForOutOfOrderTimeWindow != nil {
		in, out := &in.ResultsCacheTTLForOutOfOrderTimeWindow, &out.ResultsCacheTTLForOutOfOrderTimeWindow
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTLForCardinalityQuery != nil {
		in, out := &in.ResultsCacheTTLForCardinalityQuery, &out.ResultsCacheTTLForCardinalityQuery
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheTTLForLabelsQuery != nil {
		in, out := &in.ResultsCacheTTLForLabelsQuery, &out.ResultsCacheTTLForLabelsQuery
		*out = new(v1.Duration)
		**out = **in
	}
	if in.ResultsCacheForUnalignedQueryEnabled != nil {
		in, out := &in.ResultsCacheForUnalignedQueryEnabled, &out.ResultsCacheForUnalignedQueryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxQueryExpressionSizeBytes != nil {
		in, out := &in.MaxQueryExpressionSizeBytes, &out.MaxQueryExpressionSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.CardinalityAnalysisEnabled != nil {
		in, out := &in.CardinalityAnalysisEnabled, &out.CardinalityAnalysisEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LabelNamesAndValuesResultsMaxSizeBytes != nil {
		in, out := &in.LabelNamesAndValuesResultsMaxSizeBytes, &out.LabelNamesAndValuesResultsMaxSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.LabelValuesMaxCardinalityLabelNamesPerRequest != nil {
		in, out := &in.LabelValuesMaxCardinalityLabelNamesPerRequest, &out.LabelValuesMaxCardinalityLabelNamesPerRequest
		*out = new(int)
		**out = **in
	}
	if in.RulerEvaluationDelay != nil {
		in, out := &in.RulerEvaluationDelay, &out.RulerEvaluationDelay
		*out = new(v1.Duration)
		**out = **in
	}
	if in.RulerTenantShardSize != nil {
		in, out := &in.RulerTenantShardSize, &out.RulerTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.RulerMaxRulesPerRuleGroup != nil {
		in, out := &in.RulerMaxRulesPerRuleGroup, &out.RulerMaxRulesPerRuleGroup
		*out = new(int)
		**out = **in
	}
	if in.RulerMaxRuleGroupsPerTenant != nil {
		in, out := &in.RulerMaxRuleGroupsPerTenant, &out.RulerMaxRuleGroupsPerTenant
		*out = new(int)
		**out = **in
	}
	if in.RulerRecordingRulesEvaluationEnabled != nil {
		in, out := &in.RulerRecordingRulesEvaluationEnabled, &out.RulerRecordingRulesEvaluationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RulerAlertingRulesEvaluationEnabled != nil {
		in, out := &in.RulerAlertingRulesEvaluationEnabled, &out.RulerAlertingRulesEvaluationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RulerSyncRulesOnChangesEnabled != nil {
		in, out := &in.RulerSyncRulesOnChangesEnabled, &out.RulerSyncRulesOnChangesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StoreGatewayTenantShardSize != nil {
		in, out := &in.StoreGatewayTenantShardSize, &out.StoreGatewayTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.CompactorBlocksRetentionPeriod != nil {
		in, out := &in.CompactorBlocksRetentionPeriod, &out.CompactorBlocksRetentionPeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.CompactorSplitAndMergeShards != nil {
		in, out := &in.CompactorSplitAndMergeShards, &out.CompactorSplitAndMergeShards
		*out = new(int)
		**out = **in
	}
	if in.CompactorSplitGroups != nil {
		in, out := &in.CompactorSplitGroups, &out.CompactorSplitGroups
		*out = new(int)
		**out = **in
	}
	if in.CompactorTenantShardSize != nil {
		in, out := &in.CompactorTenantShardSize, &out.CompactorTenantShardSize
		*out = new(int)
		**out = **in
	}
	if in.CompactorPartialBlockDeletionDelay != nil {
		in, out := &in.CompactorPartialBlockDeletionDelay, &out.CompactorPartialBlockDeletionDelay
		*out = new(v1.Duration)
		**out = **in
	}
	if in.CompactorBlockUploadEnabled != nil {
		in, out := &in.CompactorBlockUploadEnabled, &out.CompactorBlockUploadEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CompactorBlockUploadValidationEnabled != nil {
		in, out := &in.CompactorBlockUploadValidationEnabled, &out.CompactorBlockUploadValidationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CompactorBlockUploadVerifyChunks != nil {
		in, out := &in.CompactorBlockUploadVerifyChunks, &out.CompactorBlockUploadVerifyChunks
		*out = new(bool)
		**out = **in
	}
	if in.CompactorBlockUploadMaxBlockSizeBytes != nil {
		in, out := &in.CompactorBlockUploadMaxBlockSizeBytes, &out.CompactorBlockUploadMaxBlockSizeBytes
		*out = new(int64)
		**out = **in
	}
	if in.S3SSEType != nil {
		in, out := &in.S3SSEType, &out.S3SSEType
		*out = new(string)
		**out = **in
	}
	if in.S3SSEKMSKeyID != nil {
		in, out := &in.S3SSEKMSKeyID, &out.S3SSEKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.S3SSEKMSEncryptionContext != nil {
		in, out := &in.S3SSEKMSEncryptionContext, &out.S3SSEKMSEncryptionContext
		*out = new(string)
		**out = **in
	}
	if in.AlertmanagerReceiversBlockCIDRNetworks != nil {
		in, out := &in.AlertmanagerReceiversBlockCIDRNetworks, &out.AlertmanagerReceiversBlockCIDRNetworks
		*out = new(string)
		**out = **in
	}
	if in.AlertmanagerReceiversBlockPrivateAddresses != nil {
		in, out := &in.AlertmanagerReceiversBlockPrivateAddresses, &out.AlertmanagerReceiversBlockPrivateAddresses
		*out = new(bool)
		**out = **in
	}
	if in.NotificationRateLimit != nil {
		in, out := &in.NotificationRateLimit, &out.NotificationRateLimit
		*out = new(float64)
		**out = **in
	}
	if in.NotificationRateLimitPerIntegration != nil {
		in, out := &in.NotificationRateLimitPerIntegration, &out.NotificationRateLimitPerIntegration
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.AlertmanagerMaxConfigSizeBytes != nil {
		in, out := &in.AlertmanagerMaxConfigSizeBytes, &out.AlertmanagerMaxConfigSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxTemplatesCount != nil {
		in, out := &in.AlertmanagerMaxTemplatesCount, &out.AlertmanagerMaxTemplatesCount
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxTemplateSizeBytes != nil {
		in, out := &in.AlertmanagerMaxTemplateSizeBytes, &out.AlertmanagerMaxTemplateSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxDispatcherAggregationGroups != nil {
		in, out := &in.AlertmanagerMaxDispatcherAggregationGroups, &out.AlertmanagerMaxDispatcherAggregationGroups
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxAlertsCount != nil {
		in, out := &in.AlertmanagerMaxAlertsCount, &out.AlertmanagerMaxAlertsCount
		*out = new(int)
		**out = **in
	}
	if in.AlertmanagerMaxAlertsSizeBytes != nil {
		in, out := &in.AlertmanagerMaxAlertsSizeBytes, &out.AlertmanagerMaxAlertsSizeBytes
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MimirLimitsInput.
func (in *MimirLimitsInput) DeepCopy() *MimirLimitsInput {
	if in == nil {
		return nil
	}
	out := new(MimirLimitsInput)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MimirSpec) DeepCopyInto(out *MimirSpec) {
	*out = *in
	out.ConfigMap = in.ConfigMap
	in.Config.DeepCopyInto(&out.Config)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MimirSpec.
func (in *MimirSpec) DeepCopy() *MimirSpec {
	if in == nil {
		return nil
	}
	out := new(MimirSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MultiRuntimeConfig) DeepCopyInto(out *MultiRuntimeConfig) {
	*out = *in
	if in.Mirroring != nil {
		in, out := &in.Mirroring, &out.Mirroring
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MultiRuntimeConfig.
func (in *MultiRuntimeConfig) DeepCopy() *MultiRuntimeConfig {
	if in == nil {
		return nil
	}
	out := new(MultiRuntimeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotifierConfig) DeepCopyInto(out *NotifierConfig) {
	*out = *in
	out.TLS = in.TLS
	out.BasicAuth = in.BasicAuth
	out.HeaderAuth = in.HeaderAuth
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotifierConfig.
func (in *NotifierConfig) DeepCopy() *NotifierConfig {
	if in == nil {
		return nil
	}
	out := new(NotifierConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyMatch) DeepCopyInto(out *PolicyMatch) {
	*out = *in
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make([]MatchPolicyAttribute, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyMatch.
func (in *PolicyMatch) DeepCopy() *PolicyMatch {
	if in == nil {
		return nil
	}
	out := new(PolicyMatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulerAlertManagerConfig) DeepCopyInto(out *RulerAlertManagerConfig) {
	*out = *in
	if in.AlertmanagerDiscovery != nil {
		in, out := &in.AlertmanagerDiscovery, &out.AlertmanagerDiscovery
		*out = new(bool)
		**out = **in
	}
	if in.AlertmanagerRefreshInterval != nil {
		in, out := &in.AlertmanagerRefreshInterval, &out.AlertmanagerRefreshInterval
		*out = new(v1.Duration)
		**out = **in
	}
	if in.AlertRelabelConfigs != nil {
		in, out := &in.AlertRelabelConfigs, &out.AlertRelabelConfigs
		*out = make([]*monitoringv1.RelabelConfig, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(monitoringv1.RelabelConfig)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.NotificationTimeout != nil {
		in, out := &in.NotificationTimeout, &out.NotificationTimeout
		*out = new(v1.Duration)
		**out = **in
	}
	out.Notifier = in.Notifier
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulerAlertManagerConfig.
func (in *RulerAlertManagerConfig) DeepCopy() *RulerAlertManagerConfig {
	if in == nil {
		return nil
	}
	out := new(RulerAlertManagerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardstreamsConfig) DeepCopyInto(out *ShardstreamsConfig) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LoggingEnabled != nil {
		in, out := &in.LoggingEnabled, &out.LoggingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DesiredRate != nil {
		in, out := &in.DesiredRate, &out.DesiredRate
		*out = new(uint64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardstreamsConfig.
func (in *ShardstreamsConfig) DeepCopy() *ShardstreamsConfig {
	if in == nil {
		return nil
	}
	out := new(ShardstreamsConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StreamRetention) DeepCopyInto(out *StreamRetention) {
	*out = *in
	out.Period = in.Period
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StreamRetention.
func (in *StreamRetention) DeepCopy() *StreamRetention {
	if in == nil {
		return nil
	}
	out := new(StreamRetention)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TLSClientConfig) DeepCopyInto(out *TLSClientConfig) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TLSClientConfig.
func (in *TLSClientConfig) DeepCopy() *TLSClientConfig {
	if in == nil {
		return nil
	}
	out := new(TLSClientConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TempoLimits) DeepCopyInto(out *TempoLimits) {
	*out = *in
	if in.IngestionRateStrategy != nil {
		in, out := &in.IngestionRateStrategy, &out.IngestionRateStrategy
		*out = new(string)
		**out = **in
	}
	if in.IngestionRateLimitBytes != nil {
		in, out := &in.IngestionRateLimitBytes, &out.IngestionRateLimitBytes
		*out = new(int)
		**out = **in
	}
	if in.IngestionBurstSizeBytes != nil {
		in, out := &in.IngestionBurstSizeBytes, &out.IngestionBurstSizeBytes
		*out = new(int)
		**out = **in
	}
	if in.MaxLocalTracesPerUser != nil {
		in, out := &in.MaxLocalTracesPerUser, &out.MaxLocalTracesPerUser
		*out = new(int)
		**out = **in
	}
	if in.MaxGlobalTracesPerUser != nil {
		in, out := &in.MaxGlobalTracesPerUser, &out.MaxGlobalTracesPerUser
		*out = new(int)
		**out = **in
	}
	if in.Forwarders != nil {
		in, out := &in.Forwarders, &out.Forwarders
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MetricsGeneratorRingSize != nil {
		in, out := &in.MetricsGeneratorRingSize, &out.MetricsGeneratorRingSize
		*out = new(int)
		**out = **in
	}
	if in.MetricsGeneratorProcessors != nil {
		in, out := &in.MetricsGeneratorProcessors, &out.MetricsGeneratorProcessors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MetricsGeneratorMaxActiveSeries != nil {
		in, out := &in.MetricsGeneratorMaxActiveSeries, &out.MetricsGeneratorMaxActiveSeries
		*out = new(uint32)
		**out = **in
	}
	if in.MetricsGeneratorCollectionInterval != nil {
		in, out := &in.MetricsGeneratorCollectionInterval, &out.MetricsGeneratorCollectionInterval
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MetricsGeneratorDisableCollection != nil {
		in, out := &in.MetricsGeneratorDisableCollection, &out.MetricsGeneratorDisableCollection
		*out = new(bool)
		**out = **in
	}
	if in.MetricsGeneratorForwarderQueueSize != nil {
		in, out := &in.MetricsGeneratorForwarderQueueSize, &out.MetricsGeneratorForwarderQueueSize
		*out = new(int)
		**out = **in
	}
	if in.MetricsGeneratorForwarderWorkers != nil {
		in, out := &in.MetricsGeneratorForwarderWorkers, &out.MetricsGeneratorForwarderWorkers
		*out = new(int)
		**out = **in
	}
	if in.MetricsGeneratorProcessorServiceGraphsHistogramBuckets != nil {
		in, out := &in.MetricsGeneratorProcessorServiceGraphsHistogramBuckets, &out.MetricsGeneratorProcessorServiceGraphsHistogramBuckets
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
	if in.MetricsGeneratorProcessorServiceGraphsDimensions != nil {
		in, out := &in.MetricsGeneratorProcessorServiceGraphsDimensions, &out.MetricsGeneratorProcessorServiceGraphsDimensions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MetricsGeneratorProcessorServiceGraphsPeerAttributes != nil {
		in, out := &in.MetricsGeneratorProcessorServiceGraphsPeerAttributes, &out.MetricsGeneratorProcessorServiceGraphsPeerAttributes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MetricsGeneratorProcessorServiceGraphsEnableClientServerPrefix != nil {
		in, out := &in.MetricsGeneratorProcessorServiceGraphsEnableClientServerPrefix, &out.MetricsGeneratorProcessorServiceGraphsEnableClientServerPrefix
		*out = new(bool)
		**out = **in
	}
	if in.MetricsGeneratorProcessorSpanMetricsHistogramBuckets != nil {
		in, out := &in.MetricsGeneratorProcessorSpanMetricsHistogramBuckets, &out.MetricsGeneratorProcessorSpanMetricsHistogramBuckets
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
	if in.MetricsGeneratorProcessorSpanMetricsDimensions != nil {
		in, out := &in.MetricsGeneratorProcessorSpanMetricsDimensions, &out.MetricsGeneratorProcessorSpanMetricsDimensions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MetricsGeneratorProcessorSpanMetricsIntrinsicDimensions != nil {
		in, out := &in.MetricsGeneratorProcessorSpanMetricsIntrinsicDimensions, &out.MetricsGeneratorProcessorSpanMetricsIntrinsicDimensions
		*out = make(map[string]bool, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MetricsGeneratorProcessorSpanMetricsFilterPolicies != nil {
		in, out := &in.MetricsGeneratorProcessorSpanMetricsFilterPolicies, &out.MetricsGeneratorProcessorSpanMetricsFilterPolicies
		*out = make([]FilterPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MetricsGeneratorProcessorSpanMetricsDimensionMappings != nil {
		in, out := &in.MetricsGeneratorProcessorSpanMetricsDimensionMappings, &out.MetricsGeneratorProcessorSpanMetricsDimensionMappings
		*out = make([]DimensionMappings, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MetricsGeneratorProcessorSpanMetricsEnableTargetInfo != nil {
		in, out := &in.MetricsGeneratorProcessorSpanMetricsEnableTargetInfo, &out.MetricsGeneratorProcessorSpanMetricsEnableTargetInfo
		*out = new(bool)
		**out = **in
	}
	if in.MetricsGeneratorProcessorLocalBlocksMaxLiveTraces != nil {
		in, out := &in.MetricsGeneratorProcessorLocalBlocksMaxLiveTraces, &out.MetricsGeneratorProcessorLocalBlocksMaxLiveTraces
		*out = new(uint64)
		**out = **in
	}
	if in.MetricsGeneratorProcessorLocalBlocksMaxBlockDuration != nil {
		in, out := &in.MetricsGeneratorProcessorLocalBlocksMaxBlockDuration, &out.MetricsGeneratorProcessorLocalBlocksMaxBlockDuration
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MetricsGeneratorProcessorLocalBlocksMaxBlockBytes != nil {
		in, out := &in.MetricsGeneratorProcessorLocalBlocksMaxBlockBytes, &out.MetricsGeneratorProcessorLocalBlocksMaxBlockBytes
		*out = new(uint64)
		**out = **in
	}
	if in.MetricsGeneratorProcessorLocalBlocksFlushCheckPeriod != nil {
		in, out := &in.MetricsGeneratorProcessorLocalBlocksFlushCheckPeriod, &out.MetricsGeneratorProcessorLocalBlocksFlushCheckPeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MetricsGeneratorProcessorLocalBlocksTraceIdlePeriod != nil {
		in, out := &in.MetricsGeneratorProcessorLocalBlocksTraceIdlePeriod, &out.MetricsGeneratorProcessorLocalBlocksTraceIdlePeriod
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MetricsGeneratorProcessorLocalBlocksCompleteBlockTimeout != nil {
		in, out := &in.MetricsGeneratorProcessorLocalBlocksCompleteBlockTimeout, &out.MetricsGeneratorProcessorLocalBlocksCompleteBlockTimeout
		*out = new(v1.Duration)
		**out = **in
	}
	if in.BlockRetention != nil {
		in, out := &in.BlockRetention, &out.BlockRetention
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxBytesPerTagValuesQuery != nil {
		in, out := &in.MaxBytesPerTagValuesQuery, &out.MaxBytesPerTagValuesQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxBlocksPerTagValuesQuery != nil {
		in, out := &in.MaxBlocksPerTagValuesQuery, &out.MaxBlocksPerTagValuesQuery
		*out = new(int)
		**out = **in
	}
	if in.MaxSearchDuration != nil {
		in, out := &in.MaxSearchDuration, &out.MaxSearchDuration
		*out = new(v1.Duration)
		**out = **in
	}
	if in.MaxBytesPerTrace != nil {
		in, out := &in.MaxBytesPerTrace, &out.MaxBytesPerTrace
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TempoLimits.
func (in *TempoLimits) DeepCopy() *TempoLimits {
	if in == nil {
		return nil
	}
	out := new(TempoLimits)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TempoSpec) DeepCopyInto(out *TempoSpec) {
	*out = *in
	out.ConfigMap = in.ConfigMap
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TempoSpec.
func (in *TempoSpec) DeepCopy() *TempoSpec {
	if in == nil {
		return nil
	}
	out := new(TempoSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Tenant) DeepCopyInto(out *Tenant) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tenant.
func (in *Tenant) DeepCopy() *Tenant {
	if in == nil {
		return nil
	}
	out := new(Tenant)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Tenant) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TenantList) DeepCopyInto(out *TenantList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Tenant, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TenantList.
func (in *TenantList) DeepCopy() *TenantList {
	if in == nil {
		return nil
	}
	out := new(TenantList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TenantList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TenantSpec) DeepCopyInto(out *TenantSpec) {
	*out = *in
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = new(LimitSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TenantSpec.
func (in *TenantSpec) DeepCopy() *TenantSpec {
	if in == nil {
		return nil
	}
	out := new(TenantSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TenantStatus) DeepCopyInto(out *TenantStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make(types.Conditions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TenantStatus.
func (in *TenantStatus) DeepCopy() *TenantStatus {
	if in == nil {
		return nil
	}
	out := new(TenantStatus)
	in.DeepCopyInto(out)
	return out
}
